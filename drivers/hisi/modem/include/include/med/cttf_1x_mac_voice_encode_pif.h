/** ****************************************************************************

                    Huawei Technologies Sweden AB (C), 2001-2011

 ********************************************************************************
 * @file      CTTF_1x_MAC_Voice_Encode_PIF.h
 * @author    Automatically generated by DAISY
 * @version
 * @date      2013-12-25
 * @file
 * @brief
 * The interface is used to carry voice data from the encoder to MAC. The
 * interface also provides signaling to grant different frame size to the
 * encoder. Signaling of different frame size is used for blank-and-burst and
 * dim-and-burst functionality (i.e. when higher prioritized bits (signaling)
 * should be transmitted while the voice service is active.
 * It's interface about tx voice data between CodeC and 1x_MAC_Tx.
 * @copyright Huawei Technologies Sweden AB
 *******************************************************************************/
#ifndef CTTF_1X_MAC_VOICE_ENCODE_PIF_H
#define CTTF_1X_MAC_VOICE_ENCODE_PIF_H

/*******************************************************************************
 1. Other files included
*******************************************************************************/
#include "vos.h"
#include "cttf_1x_voice_data_public_pif.h"
#include "CodecInterface.h"

#ifdef __cplusplus
#if __cplusplus
    extern "C" {
#endif /* __cpluscplus */
#endif /* __cpluscplus */
#pragma pack(4)

/*******************************************************************************
 2. Macro definitions
*******************************************************************************/


/*******************************************************************************
 3. Enumerations declarations
*******************************************************************************/
/** ****************************************************************************
 * Name        : CTTF_1X_MAC_VOICE_ENCODE_PIF_MSG_TYPE_ENUM_UINT16
 * Description :
 *******************************************************************************/
enum CTTF_1X_MAC_VOICE_ENCODE_PIF_MSG_TYPE_ENUM
{
    ID_CTTF_VOICE_1X_MAC_SCHEDULE_IND                       = 0x0000, /* _H2ASN_MsgChoice CTTF_VOICE_1X_MAC_SCHEDULE_IND_STRU*/ /**< @sa CTTF_VOICE_1X_MAC_SCHEDULE_IND_STRU */
    ID_VOICE_CTTF_1X_MAC_SPEECH_REQ                         = 0x0001, /* _H2ASN_MsgChoice VOICE_CTTF_1X_MAC_SPEECH_REQ_STRU*/ /**< @sa VOICE_CTTF_1X_MAC_SPEECH_REQ_STRU */
    ID_CTTF_1X_MAC_VOICE_ENCODE_PIF_MSG_TYPE_ENUM_BUTT
};
typedef VOS_UINT16 CTTF_1X_MAC_VOICE_ENCODE_PIF_MSG_TYPE_ENUM_UINT16;

/** ****************************************************************************
 * Name        : MACITF_1X_SCHEDULING_HINT_ENUM_UINT16
 * Description : From Table 2-3. Service Interface Primitives Received by the
 * MAC Sublayer in 3GPP2 C.S0003-A v6.0: "Medium Access Control (MAC) Standard
 * for cdma2000 Spread Spectrum Systems", scheduling_hint is an indicator to
 * the
 * multiplex sublayer on how to prioritize
 * fragments of the Layer 2 encapsulated PDU
 * relative to other types of multiplexed traffic
 * (e.g., to determine whether to use blank-and-
 * burst or dim-and-burst). Dim-and-burst means in a frame, there are both
 * signal and voice data, and blank-and-burst means there is only voice data
 * in signal CTTF_VOICE_1X_MAC_SCHEDULE_IND.
 *******************************************************************************/
enum MACITF_1X_SCHEDULING_HINT_ENUM
{
    MACITF_1X_SCHEDULING_DIM_AND_BURST                      = 0x0000,
    MACITF_1X_SCHEDULING_BLANK_AND_BURST                    = 0x0001,
    MACITF_1X_SCHEDULING_HINT_ENUM_BUTT
};
typedef VOS_UINT16 MACITF_1X_SCHEDULING_HINT_ENUM_UINT16;


/*******************************************************************************
 4. Message Header declaration
*******************************************************************************/

/*******************************************************************************
 5. Message declaration
*******************************************************************************/

/*******************************************************************************
 6. STRUCT and UNION declaration
*******************************************************************************/

/*******************************************************************************
 7. OTHER declarations
*******************************************************************************/
/** ****************************************************************************
 * Name        : CTTF_VOICE_1X_MAC_SCHEDULE_IND_STRU
 * Description : 1x_MAC_Mux uses this signal to ask voice SO to send speech
 * data. 1x_MAC_Mux only tell CodeC the allowed maximum rate. The rate CodeC
 * used is determined by itself. But it can not beyond the @enAllowedMaxRate.
 * @enScheduleHint is used to indicate this frame is only for voice data or
 * not.
 *******************************************************************************/
typedef struct
{
    VOS_MSG_HEADER                                                            /* _H2ASN_Skip */
    CTTF_1X_MAC_VOICE_ENCODE_PIF_MSG_TYPE_ENUM_UINT16       enMsgId;          /* _H2ASN_Skip */
    VOS_UINT16                                              usOpId;
    MACITF_VOICE_RATE_TYPE_ENUM_UINT16                      enAllowedMaxRate;
    MACITF_1X_SCHEDULING_HINT_ENUM_UINT16                   enScheduleHint;
}CTTF_VOICE_1X_MAC_SCHEDULE_IND_STRU;

/** ****************************************************************************
 * Name        : VOICE_CTTF_1X_MAC_SPEECH_REQ_STRU
 * Description : Voice SO uses this signal to send its actual speech data to
 * 1x_MAC_Tx. The rate is determined by CodeC itself, and it can not beyond
 * the allowed max rate.
 *******************************************************************************/
typedef struct
{
    VOS_MSG_HEADER                                                           /* _H2ASN_Skip */
    CTTF_1X_MAC_VOICE_ENCODE_PIF_MSG_TYPE_ENUM_UINT16       enMsgId;         /* _H2ASN_Skip */
    VOS_UINT16                                              usOpId;
    MACITF_VOICE_RATE_TYPE_ENUM_UINT16                      enVoiceDataRate;
    CODEC_ENUM_UINT16                                       enCodecType;
    VOS_UINT16                                              ausReserve[1];
    VOS_UINT16                                              ausData[CTTF_1X_MAX_VOICE_DATA_BLOCK_SIZE];
}VOICE_CTTF_1X_MAC_SPEECH_REQ_STRU;


/*******************************************************************************
 8. Global  declaration
*******************************************************************************/

/*******************************************************************************
 9. Function declarations
*******************************************************************************/
/** ****************************************************************************
 * Name        : CTTF_1x_MAC_Voice_Encode_PIF_MSG_DATA
 * Description : H2ASN top level message structure definition
 *******************************************************************************/
typedef struct
{
    CTTF_1X_MAC_VOICE_ENCODE_PIF_MSG_TYPE_ENUM_UINT16       enMsgId;     /* _H2ASN_MsgChoice_Export CTTF_1X_MAC_VOICE_ENCODE_PIF_MSG_TYPE_ENUM_UINT16 */
    VOS_UINT8                                               aucMsgBlock[2];

    /* _H2ASN_MsgChoice_When_Comment CTTF_1X_MAC_VOICE_ENCODE_PIF_MSG_TYPE_ENUM_UINT16 */
}CTTF_1x_MAC_Voice_Encode_PIF_MSG_DATA;

/* _H2ASN_Length UINT32*/
/** ****************************************************************************
 * Name        : CTTF_1x_MAC_Voice_Encode_PIF
 * Description : H2ASN top level message structure definition
 *******************************************************************************/
typedef struct
{
    VOS_MSG_HEADER
    CTTF_1x_MAC_Voice_Encode_PIF_MSG_DATA                   stMsgData;
}CTTF_1x_MAC_Voice_Encode_PIF;


#if ((VOS_OS_VER == VOS_WIN32) || (VOS_OS_VER == VOS_NUCLEUS))
#pragma pack()
#else
#pragma pack(0)
#endif

#ifdef __cplusplus
#if __cplusplus
}
#endif /* __cpluscplus */
#endif /* __cpluscplus */

#endif
